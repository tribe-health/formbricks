# Build stage
FROM node:20-bookworm AS builder

# Enable corepack and install system dependencies for build
RUN corepack enable && apt-get update && apt-get install -y \
    g++ cmake make gcc python3 openssl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy only package management files first to leverage Docker cache
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY apps/web/package.json ./apps/web/package.json
COPY packages/database/package.json ./packages/database/package.json
COPY packages/database/schema.prisma ./packages/database/schema.prisma

# Install dependencies with caching
RUN corepack prepare pnpm@latest --activate
RUN NEXT_TELEMETRY_DISABLED=1 NEXT_SHARP_PATH=/app/node_modules/sharp pnpm install --frozen-lockfile --platform=linux --arch=arm64

# Copy source files more strategically
COPY . .

# Prune unnecessary files and node_modules to ensure clean build
RUN rm -rf node_modules packages/database/node_modules apps/web/node_modules
RUN pnpm install --frozen-lockfile

# Build the application with explicit environment configuration
ENV PRISMA_CLIENT_ENGINE_TYPE=binary
ENV DATABASE_URL="postgresql://supabase_admin:postgres@127.0.0.1:11432/formbricks"
ENV NEXTAUTH_SECRET="fd67d754f20ff3ae11c3dd611df106058c7af6ff61daaf67efe6a6b1d04d9fd6"
ENV ENCRYPTION_KEY="ab2c90438a35be4d50f8e5efe5c2089ba71981ffd90a4128faf71a96d2b8e9c8"
ENV CRON_SECRET="4d1d8b5531e6dbe59438dd8610f64a0c562dcf5b3b0adbe6ead8ac19ded78126"

# Create .env file for Next.js build
RUN echo "DATABASE_URL=${DATABASE_URL}\n\
NEXTAUTH_SECRET=${NEXTAUTH_SECRET}\n\
ENCRYPTION_KEY=${ENCRYPTION_KEY}\n\
CRON_SECRET=${CRON_SECRET}" > /app/apps/web/.env

# Generate Prisma client and build application
RUN cd packages/database && npx prisma generate
RUN pnpm build --filter="@formbricks/web..."

# Add verification step after build
RUN ls -la /app/apps/web/.next/

# Copy cronjobs directly
COPY docker/cronjobs /app/docker/cronjobs

# Install Prisma globally
RUN npm install -g prisma

# Create and set up uploads directory with proper permissions
RUN mkdir -p /app/apps/web/uploads/ && chown -R nextjs:nextjs /app/apps/web/uploads/
VOLUME /app/apps/web/uploads/

# Expose port and set hostname
EXPOSE 3000
ENV HOSTNAME="0.0.0.0"

# Switch to non-root user for security
USER nextjs

# Start the application with improved startup script
CMD supercronic -quiet /app/docker/cronjobs & \
    cd packages/database && npx prisma migrate deploy && cd ../.. && \
    exec node apps/web/server.js
